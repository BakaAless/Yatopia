From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: ishland <ishlandmc@yeah.net>
Date: Thu, 28 Jan 2021 20:47:32 +0800
Subject: [PATCH] fixup! Detailed lag and crash reports


diff --git a/src/main/java/net/minecraft/server/CrashReport.java b/src/main/java/net/minecraft/server/CrashReport.java
index e52eb754debd3abe02da978825e53839e87302fc..a6af99f6fcb70944269e22b96d626eedb34090a5 100644
--- a/src/main/java/net/minecraft/server/CrashReport.java
+++ b/src/main/java/net/minecraft/server/CrashReport.java
@@ -87,7 +87,7 @@ public class CrashReport {
         if (this.h != null && this.h.length > 0) {
             stringbuilder.append("-- Head --\n");
             stringbuilder.append("Thread: ").append(Thread.currentThread().getName()).append("\n");
-            org.yatopiamc.yatopia.server.util.StackTraceUtils.printPlugins(this.h, stringbuilder::append); // Yatopia
+            org.yatopiamc.yatopia.api.internal.StackTraceUtils.print(this.h, stringbuilder::append); // Yatopia
             stringbuilder.append("\n"); // Yatopia
             stringbuilder.append("Stacktrace:\n");
             StackTraceElement[] astacktraceelement = this.h;
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 1105ee7274df3f482b816c5f6183ae8594da55be..9c89d7eda29fc61bb606d78f7338c7c4976b46a9 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1040,7 +1040,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
             }
             // Paper end
             MinecraftServer.LOGGER.error("Encountered an unexpected exception", throwable);
-            org.yatopiamc.yatopia.server.util.StackTraceUtils.printPlugins(throwable.getStackTrace(), MinecraftServer.LOGGER::error); // Yatopia
+            org.yatopiamc.yatopia.api.internal.StackTraceUtils.print(throwable.getStackTrace(), MinecraftServer.LOGGER::error); // Yatopia
             MinecraftServer.LOGGER.error(""); // Yatopia
             // Spigot Start
             if ( throwable.getCause() != null )
diff --git a/src/main/java/net/minecraft/server/NetworkManager.java b/src/main/java/net/minecraft/server/NetworkManager.java
index 548c62a838848a9183e14f91b21a9dc309d8a3b2..094b617e5980c7b5f0746f16fbe0715ed419e345 100644
--- a/src/main/java/net/minecraft/server/NetworkManager.java
+++ b/src/main/java/net/minecraft/server/NetworkManager.java
@@ -28,6 +28,7 @@ import org.apache.logging.log4j.Marker;
 import org.apache.logging.log4j.MarkerManager;
 
 import io.netty.util.concurrent.AbstractEventExecutor; // Tuinity
+import org.yatopiamc.yatopia.api.internal.StackTraceUtils;
 
 public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
 
@@ -382,6 +383,9 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
             channelfuture.addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
             // Paper start
             } catch (Exception e) {
+                LOGGER.error("Encountered unexpected exception sending packets");
+                StackTraceUtils.print(e, LOGGER::error);
+                LOGGER.error(StackTraceUtils.EXCEPTION_DETAILS_BELOW);
                 LOGGER.error("NetworkException: " + player, e);
                 close(new ChatMessage("disconnect.genericReason", "Internal Exception: " + e.getMessage()));;
                 packet.onPacketDispatchFinish(player, null);
@@ -421,6 +425,9 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
                         channelfuture1.addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
                         // Paper start
                     } catch (Exception e) {
+                        LOGGER.error("Encountered unexpected exception sending packets");
+                        StackTraceUtils.print(e, LOGGER::error);
+                        LOGGER.error(StackTraceUtils.EXCEPTION_DETAILS_BELOW);
                         LOGGER.error("NetworkException: " + player, e);
                         close(new ChatMessage("disconnect.genericReason", "Internal Exception: " + e.getMessage()));;
                         packet.onPacketDispatchFinish(player, null);
@@ -456,6 +463,9 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
                         channelfuture1.addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
                         // Paper start
                     } catch (Exception e) {
+                        LOGGER.error("Encountered unexpected exception sending packets");
+                        StackTraceUtils.print(e, LOGGER::error);
+                        LOGGER.error(StackTraceUtils.EXCEPTION_DETAILS_BELOW);
                         LOGGER.error("NetworkException: " + player, e);
                         close(new ChatMessage("disconnect.genericReason", "Internal Exception: " + e.getMessage()));;
                         packet.onPacketDispatchFinish(player, null);
diff --git a/src/main/java/net/minecraft/server/PlayerConnectionUtils.java b/src/main/java/net/minecraft/server/PlayerConnectionUtils.java
index e698dd22607b2b2c4068c5bfb03ac53eb5bac080..745e7097d5b10e6b6dbb7f69f1fb07d20e82f125 100644
--- a/src/main/java/net/minecraft/server/PlayerConnectionUtils.java
+++ b/src/main/java/net/minecraft/server/PlayerConnectionUtils.java
@@ -45,6 +45,9 @@ public class PlayerConnectionUtils {
                     // Paper start
                     catch (Exception e) {
                         NetworkManager networkmanager = t0.a();
+                        LOGGER.error("Encountered unexpected exception sending packets");
+                        org.yatopiamc.yatopia.api.internal.StackTraceUtils.print(e, LOGGER::error);
+                        LOGGER.error(org.yatopiamc.yatopia.api.internal.StackTraceUtils.EXCEPTION_DETAILS_BELOW);
                         if (networkmanager.getPlayer() != null) {
                             LOGGER.error("Error whilst processing packet {} for {}[{}]", packet, networkmanager.getPlayer().getName(), networkmanager.getSocketAddress(), e);
                         } else {
diff --git a/src/main/java/net/minecraft/server/ServerConnection.java b/src/main/java/net/minecraft/server/ServerConnection.java
index 0668d383db1f3a81d1053954d72678c7ac5aecec..d7b20549fc87419b27223b9cff6fee39532c4d2a 100644
--- a/src/main/java/net/minecraft/server/ServerConnection.java
+++ b/src/main/java/net/minecraft/server/ServerConnection.java
@@ -153,6 +153,9 @@ public class ServerConnection {
                                 throw new ReportedException(CrashReport.a(exception, "Ticking memory connection"));
                             }
 
+                            ServerConnection.LOGGER.error("Encountered unexpected exception sending packets");
+                            org.yatopiamc.yatopia.api.internal.StackTraceUtils.print(exception, ServerConnection.LOGGER::error);
+                            ServerConnection.LOGGER.error(org.yatopiamc.yatopia.api.internal.StackTraceUtils.EXCEPTION_DETAILS_BELOW);
                             ServerConnection.LOGGER.warn("Failed to handle packet for {}", networkmanager.getSocketAddress(), exception);
                             ChatComponentText chatcomponenttext = new ChatComponentText("Internal server error");
 
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 626fab23a727073f502d934fc8f8616326ee8b52..a370790e2d410a0ee0db0c8eb4d84a920c0b96d6 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -988,6 +988,8 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
                         // Paper start - Prevent tile entity and entity crashes
                         String msg = "TileEntity threw exception at " + tileentity.world.getWorld().getName() + ":" + tileentity.position.getX() + "," + tileentity.position.getY() + "," + tileentity.position.getZ();
                         System.err.println(msg);
+                        org.yatopiamc.yatopia.api.internal.StackTraceUtils.print(throwable, System.err::println);
+                        System.err.println(org.yatopiamc.yatopia.api.internal.StackTraceUtils.EXCEPTION_DETAILS_BELOW);
                         throwable.printStackTrace();
                         getServer().getPluginManager().callEvent(new ServerExceptionEvent(new ServerInternalException(msg, throwable)));
                         // Paper end
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
index 13e461ffb2ee2e7d0440c0f60809ea99629b843c..2d53d0dada01582b31e017d81bdf4599c38d4992 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
@@ -455,6 +455,7 @@ public class CraftScheduler implements BukkitScheduler {
         parsePending();
         while (isReady(currentTick)) {
             final CraftTask task = pending.remove();
+            lastSyncTask = task;
             if (task.getPeriod() < CraftTask.NO_REPEATING) {
                 if (task.isSync()) {
                     runners.remove(task.getTaskId(), task);
@@ -473,12 +474,13 @@ public class CraftScheduler implements BukkitScheduler {
                         task.getTaskId(),
                         task.getOwner().getDescription().getFullName());
                     if (task.getOwner() == MINECRAFT) {
-                        net.minecraft.server.MinecraftServer.LOGGER.error(msg, throwable);
+                        net.minecraft.server.MinecraftServer.LOGGER.error(msg);
+                        org.yatopiamc.yatopia.api.internal.StackTraceUtils.print(throwable, net.minecraft.server.MinecraftServer.LOGGER::error);
+                        net.minecraft.server.MinecraftServer.LOGGER.error(org.yatopiamc.yatopia.api.internal.StackTraceUtils.EXCEPTION_DETAILS_BELOW, throwable);
                     } else {
-                        task.getOwner().getLogger().log(
-                            Level.WARNING,
-                            msg,
-                            throwable);
+                        task.getOwner().getLogger().log(Level.SEVERE, msg);
+                        org.yatopiamc.yatopia.api.internal.StackTraceUtils.print(throwable, _msg -> task.getOwner().getLogger().log(Level.SEVERE, _msg));
+                        task.getOwner().getLogger().log(Level.SEVERE, org.yatopiamc.yatopia.api.internal.StackTraceUtils.EXCEPTION_DETAILS_BELOW, throwable);
                     }
                     org.bukkit.Bukkit.getServer().getPluginManager().callEvent(
                         new ServerExceptionEvent(new ServerSchedulerException(msg, throwable, task)));
@@ -493,6 +495,7 @@ public class CraftScheduler implements BukkitScheduler {
                 // We don't need to parse pending
                 // (async tasks must live with race-conditions if they attempt to cancel between these few lines of code)
             }
+            lastSyncTask = null;
             final long period = task.getPeriod(); // State consistency
             if (period > 0) {
                 task.setNextRun(currentTick + period);
@@ -635,4 +638,9 @@ public class CraftScheduler implements BukkitScheduler {
     public BukkitTask runTaskTimerAsynchronously(Plugin plugin, BukkitRunnable task, long delay, long period) throws IllegalArgumentException {
         throw new UnsupportedOperationException("Use BukkitRunnable#runTaskTimerAsynchronously(Plugin, long, long)");
     }
+
+    private volatile CraftTask lastSyncTask = null;
+    public CraftTask getLastSyncTask() {
+        return lastSyncTask;
+    }
 }
diff --git a/src/main/java/org/spigotmc/WatchdogThread.java b/src/main/java/org/spigotmc/WatchdogThread.java
index 469aae7046dd37fd77bcb8ab601ec11a19a92ed4..a933a6c153ed8a8aa7de04c23104ee1c24c6e6b1 100644
--- a/src/main/java/org/spigotmc/WatchdogThread.java
+++ b/src/main/java/org/spigotmc/WatchdogThread.java
@@ -140,6 +140,14 @@ public class WatchdogThread extends Thread
                 log.log(Level.SEVERE, "Handling packet for connection: " + packetListener);
             }
         }
+
+        if (Bukkit.getScheduler() instanceof org.bukkit.craftbukkit.scheduler.CraftScheduler) {
+            final org.bukkit.craftbukkit.scheduler.CraftScheduler scheduler = (org.bukkit.craftbukkit.scheduler.CraftScheduler) Bukkit.getScheduler();
+            final org.bukkit.craftbukkit.scheduler.CraftTask lastSyncTask = scheduler.getLastSyncTask();
+            if (lastSyncTask != null) {
+                log.log(Level.SEVERE, "Running task " + lastSyncTask.getTaskId() + " for '" + lastSyncTask.getOwner().getDescription().getFullName() + "', TaskClass: " + lastSyncTask.getTaskClass());
+            }
+        } else log.log(Level.SEVERE, "Unofficial scheduler, unable to get task information");
     }
     // Tuinity end - log detailed tick information
 
@@ -272,7 +280,7 @@ public class WatchdogThread extends Thread
             }
         }
         // Yatopia start - dump plugins info
-        org.yatopiamc.yatopia.server.util.StackTraceUtils.printPlugins(thread.getStackTrace(), msg -> log.log(Level.SEVERE, msg));
+        org.yatopiamc.yatopia.api.internal.StackTraceUtils.print(thread.getStackTrace(), msg -> log.log(Level.SEVERE, msg));
         log.log(Level.SEVERE, "");
         // Yatopia end
         log.log( Level.SEVERE, "\tStack:" );
diff --git a/src/main/java/org/yatopiamc/yatopia/server/util/StackTraceUtils.java b/src/main/java/org/yatopiamc/yatopia/server/util/StackTraceUtils.java
deleted file mode 100644
index 627debed74cd8400371de887c2667ff839288de3..0000000000000000000000000000000000000000
--- a/src/main/java/org/yatopiamc/yatopia/server/util/StackTraceUtils.java
+++ /dev/null
@@ -1,72 +0,0 @@
-package org.yatopiamc.yatopia.server.util;
-
-import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
-import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;
-import org.bukkit.Bukkit;
-import org.bukkit.plugin.Plugin;
-import org.bukkit.plugin.PluginLoader;
-import org.bukkit.plugin.SimplePluginManager;
-import org.bukkit.plugin.java.JavaPlugin;
-import org.bukkit.plugin.java.JavaPluginLoader;
-import org.bukkit.plugin.java.PluginClassLoader;
-
-import java.util.Collection;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.function.Consumer;
-
-public class StackTraceUtils {
-
-    public static void printPlugins(StackTraceElement[] stackTrace, Consumer<String> out) {
-        Map<Plugin, Set<Class<?>>> loadedClasses = scanForPluginClasses();
-
-        Set<Plugin> suspectedPlugins = new HashSet<>();
-        for (StackTraceElement stackTraceElement : stackTrace) {
-            for (Map.Entry<Plugin, Set<Class<?>>> pluginSetEntry : loadedClasses.entrySet()) {
-                if (pluginSetEntry.getValue().stream().anyMatch(clazz -> clazz.getName().equals(stackTraceElement.getClassName())))
-                    suspectedPlugins.add(pluginSetEntry.getKey());
-            }
-        }
-
-        if (!suspectedPlugins.isEmpty()) {
-            out.accept("Suspected Plugins: ");
-            for (Plugin plugin : suspectedPlugins) {
-                StringBuilder builder = new StringBuilder("\t");
-                builder.append(plugin.getName())
-                        .append("{")
-                        .append(plugin.isEnabled() ? "enabled" : "disabled")
-                        .append(",").append("ver=").append(plugin.getDescription().getVersion());
-                if (!plugin.isNaggable())
-                    builder.append(",").append("nag");
-                if (plugin instanceof JavaPlugin)
-                    builder.append(",").append("path=").append(((JavaPlugin) plugin).getFile());
-
-                builder.append("}");
-                out.accept(builder.toString());
-            }
-        } else {
-            out.accept("Suspected Plugins: None");
-        }
-    }
-
-    private static Map<Plugin, Set<Class<?>>> scanForPluginClasses() {
-        Map<Plugin, Set<Class<?>>> loadedClasses = new Object2ObjectOpenHashMap<>();
-        if (Bukkit.getPluginManager() instanceof SimplePluginManager) {
-            final SimplePluginManager pluginManager = (SimplePluginManager) Bukkit.getPluginManager();
-            final Collection<PluginLoader> pluginLoaders = pluginManager.getPluginLoaders();
-            for (PluginLoader pluginLoader : pluginLoaders) {
-                if (pluginLoader instanceof JavaPluginLoader) {
-                    JavaPluginLoader javaPluginLoader = (JavaPluginLoader) pluginLoader;
-                    final List<PluginClassLoader> classLoaders = javaPluginLoader.getClassLoaders();
-                    for (PluginClassLoader classLoader : classLoaders) {
-                        loadedClasses.put(classLoader.getPlugin(), new ObjectOpenHashSet<>(classLoader.getLoadedClasses()));
-                    }
-                }
-            }
-        }
-        return loadedClasses;
-    }
-
-}
