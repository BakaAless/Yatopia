From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: YatopiaMC <yatopiamc@gmail.com>
Date: Fri, 23 Oct 2020 09:20:01 -0700
Subject: [PATCH] Utilities

This patch includes all utilities required by the Yatopia project and its patches.

Co-authored-by: Mykyta Komarnytskyy <nkomarn@hotmail.com>
Co-authored-by: Ivan Pekov <ivan@mrivanplays.com>

diff --git a/src/main/java/net/yatopia/server/map/ConcurrentTrackerMap.java b/src/main/java/net/yatopia/server/map/ConcurrentTrackerMap.java
new file mode 100644
index 0000000000000000000000000000000000000000..75a6667bf23b097899a34b5a17ac5439d51b537b
--- /dev/null
+++ b/src/main/java/net/yatopia/server/map/ConcurrentTrackerMap.java
@@ -0,0 +1,146 @@
+package net.yatopia.server.map;
+
+
+import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
+import it.unimi.dsi.fastutil.ints.IntSet;
+import it.unimi.dsi.fastutil.objects.AbstractObjectCollection;
+import it.unimi.dsi.fastutil.objects.ObjectCollection;
+import it.unimi.dsi.fastutil.objects.ObjectIterator;
+import it.unimi.dsi.fastutil.objects.ObjectSet;
+
+import java.util.Iterator;
+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.function.Consumer;
+
+/**
+  * A {@link ConcurrentHashMap} wrapper that implements {@link Int2ObjectMap}.
+  * This is used for the entity tracker, where the expected map type is an
+  * Int2ObjectMap. However, the asynchronous tracker implementation requires
+  * a concurrent map. In order to not break support for plugins that make direct
+  * calls to the maps and expect an Int2ObjectMap, such as Citizens, this wrapper
+  * is used.
+  *
+  * @param <V>
+  */
+public class ConcurrentTrackerMap<V> implements Int2ObjectMap<V> {
+
+    protected transient Map<Integer, V> delegate;
+    protected transient ObjectCollection<V> values;
+
+    public ConcurrentTrackerMap() {
+        this.delegate = new ConcurrentHashMap<>();
+    }
+
+    @Override
+    public int size() {
+        return delegate.size();
+    }
+
+    @Override
+    public void defaultReturnValue(V v) {
+        // unused
+            }
+
+    @Override
+    public V defaultReturnValue() {
+        return null; // unused
+    }
+
+    @Override
+    public ObjectSet<Entry<V>> int2ObjectEntrySet() {
+        return null; // unused
+    }
+
+    @Override
+    public IntSet keySet() {
+        return null; // unused
+    }
+
+    @Override
+    public ObjectCollection<V> values() {
+        if (this.values == null) {
+                this.values = new AbstractObjectCollection<V>() {
+                public ObjectIterator<V> iterator() {
+                                return new ValueIterator(delegate.values().iterator());
+                            }
+
+                public int size() {
+                                return delegate.size();
+                            }
+
+                public boolean contains(Object v) {
+                                return delegate.containsValue(v);
+                            }
+
+                public void clear() {
+                                delegate.clear();
+                            }
+
+                public void forEach(Consumer<? super V> consumer) {
+                                delegate.forEach((integer, v) -> consumer.accept(v));
+                            }
+            };
+            }
+
+                return this.values;
+    }
+
+    @Override
+    public boolean containsKey(int i) {
+        return delegate.containsKey(i);
+    }
+
+    @Override
+    public V get(int i) {
+        return delegate.get(i);
+    }
+
+    @Override
+    public V put(int key, V value) {
+        return delegate.put(key, value);
+    }
+
+    @Override
+    public boolean remove(int key, Object value) {
+        return delegate.remove(key, value);
+    }
+
+    @Override
+    public V remove(int key) {
+        return delegate.remove(key);
+    }
+
+    @Override
+    public boolean isEmpty() {
+        return delegate.isEmpty();
+    }
+
+    @Override
+    public boolean containsValue(Object value) {
+        return delegate.containsValue(value);
+    }
+
+    @Override
+    public void putAll(Map<? extends Integer, ? extends V> m) {
+        delegate.putAll(m);
+    }
+
+    private final class ValueIterator implements ObjectIterator<V> {
+
+        protected transient Iterator<V> iterator;
+
+        public ValueIterator(Iterator<V> iterator) {
+                this.iterator = iterator;
+            }
+
+        @Override
+        public boolean hasNext() {
+                return iterator.hasNext();
+            }
+
+        public V next() {
+                return iterator.next();
+            }
+    }
+}
diff --git a/src/main/java/net/yatopia/server/util/Constants.java b/src/main/java/net/yatopia/server/util/Constants.java
new file mode 100644
index 0000000000000000000000000000000000000000..5b2ac2bd00c49e44f5692be42e483409a3b70a5c
--- /dev/null
+++ b/src/main/java/net/yatopia/server/util/Constants.java
@@ -0,0 +1,7 @@
+package net.yatopia.server.util;
+
+public class Constants {
+
+    public static final int[] EMPTY_ARRAY = new int[0];
+    public static final int[] ZERO_ARRAY = new int[]{0};
+}
diff --git a/src/main/java/net/yatopia/server/util/MathUtils.java b/src/main/java/net/yatopia/server/util/MathUtils.java
new file mode 100644
index 0000000000000000000000000000000000000000..b1d277d831a36a0f9e5c33f1957e1739de18abb5
--- /dev/null
+++ b/src/main/java/net/yatopia/server/util/MathUtils.java
@@ -0,0 +1,17 @@
+package net.yatopia.server.util;
+
+public class MathUtils {
+
+    /**
+     * An efficient modulo implementation that avoids the use of loops
+     * and instead uses faster bitwise operations to achieve the fastest
+     * possible execution time.
+     *
+     * @param dividend the dividend
+     * @param divisor the divisor
+     * @return the remainder
+     */
+    public static int fastMod(int dividend, int divisor) {
+        return dividend & (divisor - 1);
+    }
+}
diff --git a/src/main/java/net/yatopia/server/util/TimeUtils.java b/src/main/java/net/yatopia/server/util/TimeUtils.java
new file mode 100644
index 0000000000000000000000000000000000000000..d68e8ec871b99f0e6fe1c52948bedf38bd449b27
--- /dev/null
+++ b/src/main/java/net/yatopia/server/util/TimeUtils.java
@@ -0,0 +1,27 @@
+package net.yatopia.server.util;
+
+import java.util.concurrent.TimeUnit;
+
+public class TimeUtils {
+
+    public static String getFriendlyName(TimeUnit unit) {
+        switch (unit) {
+            case NANOSECONDS:
+                return "ns";
+            case MILLISECONDS:
+                return "ms";
+            case MICROSECONDS:
+                return "micros";
+            case SECONDS:
+                return "s";
+            case MINUTES:
+                return "m";
+            case DAYS:
+                return "d";
+            case HOURS:
+                return "h";
+            default:
+                throw new AssertionError();
+        }
+    }
+}
