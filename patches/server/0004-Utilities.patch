From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: YatopiaMC <yatopiamc@gmail.com>
Date: Fri, 23 Oct 2020 09:20:01 -0700
Subject: [PATCH] Utilities

This patch includes all utilities required by the Yatopia project and its patches.

Co-authored-by: Mykyta Komarnytskyy <nkomarn@hotmail.com>
Co-authored-by: Ivan Pekov <ivan@mrivanplays.com>

diff --git a/pom.xml b/pom.xml
index 9f2cc8fbc0bfaefd772904076e6fd4d0c78f30ee..2acc51071e968333f85959d76b86e7e6e0ee828b 100644
--- a/pom.xml
+++ b/pom.xml
@@ -166,6 +166,12 @@
             <artifactId>commons-math3</artifactId>
             <version>3.6.1</version>
         </dependency>
+        <!-- Fast Random -->
+        <dependency>
+            <groupId>org.apache.commons</groupId>
+            <artifactId>commons-rng-core</artifactId>
+            <version>1.3</version>
+        </dependency>
     </dependencies>
 
     <repositories>
diff --git a/src/main/java/org/yatopiamc/yatopia/server/map/ConcurrentTrackerMap.java b/src/main/java/org/yatopiamc/yatopia/server/map/ConcurrentTrackerMap.java
new file mode 100644
index 0000000000000000000000000000000000000000..bd3281d3d29af26dd8d7f6ca122c0d8dfbd22cdf
--- /dev/null
+++ b/src/main/java/org/yatopiamc/yatopia/server/map/ConcurrentTrackerMap.java
@@ -0,0 +1,146 @@
+package org.yatopiamc.yatopia.server.map;
+
+
+import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
+import it.unimi.dsi.fastutil.ints.IntSet;
+import it.unimi.dsi.fastutil.objects.AbstractObjectCollection;
+import it.unimi.dsi.fastutil.objects.ObjectCollection;
+import it.unimi.dsi.fastutil.objects.ObjectIterator;
+import it.unimi.dsi.fastutil.objects.ObjectSet;
+
+import java.util.Iterator;
+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.function.Consumer;
+
+/**
+ * A {@link ConcurrentHashMap} wrapper that implements {@link Int2ObjectMap}.
+ * This is used for the entity tracker, where the expected map type is an
+ * Int2ObjectMap. However, the asynchronous tracker implementation requires
+ * a concurrent map. In order to not break support for plugins that make direct
+ * calls to the maps and expect an Int2ObjectMap, such as Citizens, this wrapper
+ * is used.
+ *
+ * @param <V>
+ */
+public class ConcurrentTrackerMap<V> implements Int2ObjectMap<V> {
+
+    protected transient Map<Integer, V> delegate;
+    protected transient ObjectCollection<V> values;
+
+    public ConcurrentTrackerMap() {
+        this.delegate = new ConcurrentHashMap<>();
+    }
+
+    @Override
+    public int size() {
+        return delegate.size();
+    }
+
+    @Override
+    public void defaultReturnValue(V v) {
+        // unused
+    }
+
+    @Override
+    public V defaultReturnValue() {
+        return null; // unused
+    }
+
+    @Override
+    public ObjectSet<Entry<V>> int2ObjectEntrySet() {
+        return null; // unused
+    }
+
+    @Override
+    public IntSet keySet() {
+        return null; // unused
+    }
+
+    @Override
+    public ObjectCollection<V> values() {
+        if (this.values == null) {
+            this.values = new AbstractObjectCollection<V>() {
+                public ObjectIterator<V> iterator() {
+                    return new ValueIterator(delegate.values().iterator());
+                }
+
+                public int size() {
+                    return delegate.size();
+                }
+
+                public boolean contains(Object v) {
+                    return delegate.containsValue(v);
+                }
+
+                public void clear() {
+                    delegate.clear();
+                }
+
+                public void forEach(Consumer<? super V> consumer) {
+                    delegate.forEach((integer, v) -> consumer.accept(v));
+                }
+            };
+        }
+
+        return this.values;
+    }
+
+    @Override
+    public boolean containsKey(int i) {
+        return delegate.containsKey(i);
+    }
+
+    @Override
+    public V get(int i) {
+        return delegate.get(i);
+    }
+
+    @Override
+    public V put(int key, V value) {
+        return delegate.put(key, value);
+    }
+
+    @Override
+    public boolean remove(int key, Object value) {
+        return delegate.remove(key, value);
+    }
+
+    @Override
+    public V remove(int key) {
+        return delegate.remove(key);
+    }
+
+    @Override
+    public boolean isEmpty() {
+        return delegate.isEmpty();
+    }
+
+    @Override
+    public boolean containsValue(Object value) {
+        return delegate.containsValue(value);
+    }
+
+    @Override
+    public void putAll(Map<? extends Integer, ? extends V> m) {
+        delegate.putAll(m);
+    }
+
+    private final class ValueIterator implements ObjectIterator<V> {
+
+        protected transient Iterator<V> iterator;
+
+        public ValueIterator(Iterator<V> iterator) {
+            this.iterator = iterator;
+        }
+
+        @Override
+        public boolean hasNext() {
+            return iterator.hasNext();
+        }
+
+        public V next() {
+            return iterator.next();
+        }
+    }
+}
diff --git a/src/main/java/org/yatopiamc/yatopia/server/util/Constants.java b/src/main/java/org/yatopiamc/yatopia/server/util/Constants.java
new file mode 100644
index 0000000000000000000000000000000000000000..ac5235155eb1b5515165fc9648b7c9d7a0713b44
--- /dev/null
+++ b/src/main/java/org/yatopiamc/yatopia/server/util/Constants.java
@@ -0,0 +1,7 @@
+package org.yatopiamc.yatopia.server.util;
+
+public class Constants {
+
+    public static final int[] EMPTY_ARRAY = new int[0];
+    public static final int[] ZERO_ARRAY = new int[]{0};
+}
diff --git a/src/main/java/org/yatopiamc/yatopia/server/util/FastRandom.java b/src/main/java/org/yatopiamc/yatopia/server/util/FastRandom.java
new file mode 100644
index 0000000000000000000000000000000000000000..e41c1e3fa656d8f595733897ab05089c3b0976a7
--- /dev/null
+++ b/src/main/java/org/yatopiamc/yatopia/server/util/FastRandom.java
@@ -0,0 +1,64 @@
+package org.yatopiamc.yatopia.server.util;
+
+import org.apache.commons.rng.core.source64.XoRoShiRo128PlusPlus;
+
+import java.util.Random;
+import java.util.SplittableRandom;
+
+public class FastRandom extends Random {
+
+    private XoRoShiRo128PlusPlus random;
+
+    public FastRandom() {
+        super();
+        SplittableRandom randomseed = new SplittableRandom();
+        this.random = new XoRoShiRo128PlusPlus(randomseed.nextLong(), randomseed.nextLong());
+    }
+
+    public FastRandom(long seed) {
+        super(seed);
+        SplittableRandom randomseed = new SplittableRandom(seed);
+        this.random = new XoRoShiRo128PlusPlus(randomseed.nextLong(), randomseed.nextLong());
+    }
+
+    @Override
+    public boolean nextBoolean() {
+        return random.nextBoolean();
+    }
+
+    @Override
+    public int nextInt() {
+        return random.nextInt();
+    }
+
+    @Override
+    public float nextFloat() {
+        return (float) random.nextDouble();
+    }
+
+    @Override
+    public double nextDouble() {
+        return random.nextDouble();
+    }
+
+    @Override
+    public synchronized void setSeed(long seed) {
+        SplittableRandom randomseed = new SplittableRandom(seed);
+        this.random = new XoRoShiRo128PlusPlus(randomseed.nextLong(), randomseed.nextLong());
+    }
+
+    @Override
+    public void nextBytes(byte[] bytes) {
+        random.nextBytes(bytes);
+    }
+
+    @Override
+    public int nextInt(int bound) {
+        return random.nextInt(bound);
+    }
+
+    @Override
+    public long nextLong() {
+        return random.nextLong();
+    }
+}
diff --git a/src/main/java/org/yatopiamc/yatopia/server/util/TimeUtils.java b/src/main/java/org/yatopiamc/yatopia/server/util/TimeUtils.java
new file mode 100644
index 0000000000000000000000000000000000000000..acdf3d60738791b767a3bafa2c9511342a8c18df
--- /dev/null
+++ b/src/main/java/org/yatopiamc/yatopia/server/util/TimeUtils.java
@@ -0,0 +1,27 @@
+package org.yatopiamc.yatopia.server.util;
+
+import java.util.concurrent.TimeUnit;
+
+public class TimeUtils {
+
+    public static String getFriendlyName(TimeUnit unit) {
+        switch (unit) {
+            case NANOSECONDS:
+                return "ns";
+            case MILLISECONDS:
+                return "ms";
+            case MICROSECONDS:
+                return "micros";
+            case SECONDS:
+                return "s";
+            case MINUTES:
+                return "m";
+            case DAYS:
+                return "d";
+            case HOURS:
+                return "h";
+            default:
+                throw new AssertionError();
+        }
+    }
+}
