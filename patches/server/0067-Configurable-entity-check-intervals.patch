From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mykyta Komarnytskyy <nkomarn@hotmail.com>
Date: Sat, 5 Dec 2020 21:29:38 -0600
Subject: [PATCH] Configurable entity check intervals

This patch adds a configuration options for how often the game runs some base entity checks. This includes suffocation damage and water checks. Suffocation checks use some fairly heavy block collision code and can be slowed down safely, improving overall entity performance substantially. Water checks can also be slowed down to bring moderate entity performance improvements.

A side effect of increasing the interval is slower suffocation damage. I find that a value of 10 works pretty well, but you can get away with 20 as well. Water checks seem balanced with a value of 10-20.

diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 32ccb556d3c4c9aeec8375b8116cc71d222fa665..805f306eafacafd3486bd8b762ba24b5cf8a0326 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -1356,14 +1356,19 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
 
     }
 
+    // Yatopia start
+    private boolean cachedFlag;
     protected boolean aK() {
+        if (ticksLived % org.yatopiamc.yatopia.server.YatopiaConfig.entityWaterCheck != 0) {
         this.M.clear();
         this.aL();
         double d0 = this.world.getDimensionManager().isNether() ? 0.007D : 0.0023333333333333335D;
-        boolean flag = this.a((Tag) TagsFluid.LAVA, d0);
+        cachedFlag = this.a((Tag) TagsFluid.LAVA, d0);
+        }
 
-        return this.isInWater() || flag;
+        return this.isInWater() || cachedFlag;
     }
+    // Yatopia end
 
     void aL() {
         if (this.getVehicle() instanceof EntityBoat) {
@@ -1383,6 +1388,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     }
 
     private void m() {
+        if (ticksLived % org.yatopiamc.yatopia.server.YatopiaConfig.entitySubmergedCheck != 0) return; // Yatopia
         this.N = this.a((Tag) TagsFluid.WATER);
         this.O = null;
         double d0 = this.getHeadY() - 0.1111111119389534D;
diff --git a/src/main/java/net/minecraft/server/EntityInsentient.java b/src/main/java/net/minecraft/server/EntityInsentient.java
index 1524c9a0eb22b8f9115dd10601eb507ef4c76ea9..e197296fda03ff25351bf62cea704ff4661e9bc7 100644
--- a/src/main/java/net/minecraft/server/EntityInsentient.java
+++ b/src/main/java/net/minecraft/server/EntityInsentient.java
@@ -1581,11 +1581,13 @@ public abstract class EntityInsentient extends EntityLiving {
 
     public boolean isInDaylight() { return this.eG(); } // Paper - OBFHELPER
     protected boolean eG() {
+        // Yatopia start - optimize entity daylight checks
+        if (ticksLived % org.yatopiamc.yatopia.server.YatopiaConfig.entityDaylightCheck != 0) return false;
         if (this.world.isDay() && !this.world.isClientSide) {
             float f = this.aR();
-            BlockPosition blockposition = this.getVehicle() instanceof EntityBoat ? (new BlockPosition(this.locX(), (double) Math.round(this.locY()), this.locZ())).up() : new BlockPosition(this.locX(), (double) Math.round(this.locY()), this.locZ());
+            BlockPosition blockposition = this.getVehicle() instanceof EntityBoat ? (new BlockPosition(this.locX(), (double) Math.round(this.locY()) + 1, this.locZ())) : new BlockPosition(this.locX(), (double) Math.round(this.locY()), this.locZ());
 
-            if (f > 0.5F && this.random.nextFloat() * 30.0F < (f - 0.4F) * 2.0F && this.world.e(blockposition)) {
+            if (f > 0.5F && this.world.e(blockposition)) { // Yatopia end
                 return true;
             }
         }
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index cc1780267f9a81c6e3c1857f868b28f90041edaf..25f51d8e2b207543cbd0cb6fb92722fb1b10767c 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -268,7 +268,7 @@ public abstract class EntityLiving extends Entity {
 
         if (!org.yatopiamc.yatopia.server.YatopiaConfig.disableEntityStuckChecks) { // Yatopia
         if (this.isAlive()) {
-            if (this.inBlock()) {
+            if (ticksLived % org.yatopiamc.yatopia.server.YatopiaConfig.entitySuffocationCheck == 0 && this.inBlock()) { // Yatopia start - configurable suffocation check interval
                 this.damageEntity(DamageSource.STUCK, 1.0F);
             } else if (flag && !this.world.getWorldBorder().a(this.getBoundingBox())) {
                 double d0 = this.world.getWorldBorder().a((Entity) this) + this.world.getWorldBorder().getDamageBuffer();
diff --git a/src/main/java/org/yatopiamc/yatopia/server/YatopiaConfig.java b/src/main/java/org/yatopiamc/yatopia/server/YatopiaConfig.java
index f81fb40931e0d6086dcb4981136698a083232d4b..62c81e87ce9a4c3b75a103eb9bf17b4747e5e9cf 100644
--- a/src/main/java/org/yatopiamc/yatopia/server/YatopiaConfig.java
+++ b/src/main/java/org/yatopiamc/yatopia/server/YatopiaConfig.java
@@ -254,9 +254,17 @@ public class YatopiaConfig {
         checkVehicleFlying = getBoolean("settings.checks.vehicle-flight", checkVehicleFlying);
     }
 
+    public static int entitySuffocationCheck = 1;
+    public static int entityWaterCheck = 1;
+    public static int entitySubmergedCheck = 1;
+    public static int entityDaylightCheck = 1;
     public static int playerTimeStatisticsInterval = 1;
     private static void intervals() {
         playerTimeStatisticsInterval = Math.max(1, getInt("settings.intervals.player-time-statistics", 1));
+        entitySuffocationCheck = Math.max(1, getInt("settings.intervals.entity-suffocation-check", 1));
+        entityWaterCheck = Math.max(1, getInt("settings.intervals.entity-water-check", 1));
+        entitySubmergedCheck = Math.max(1, getInt("settings.intervals.entity-submerged-check", 1));
+        entityDaylightCheck = Math.max(1, getInt("settings.intervals.entity-daylight-check", 1));
     }
 
     public static boolean criterionTriggerLocation = true;
