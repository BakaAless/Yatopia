From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: tr7zw <tr7zw@live.de>
Date: Wed, 5 Aug 2020 08:05:10 -0500
Subject: [PATCH] Add config Yatopia command and basic settings


diff --git a/src/main/java/co/aikar/timings/TimingsExport.java b/src/main/java/co/aikar/timings/TimingsExport.java
index dae2e5d70756c5b61163d57099b65f7e415b288c..21712a6691e00ffaf523f084da6ce5659fc98be9 100644
--- a/src/main/java/co/aikar/timings/TimingsExport.java
+++ b/src/main/java/co/aikar/timings/TimingsExport.java
@@ -234,6 +234,7 @@ public class TimingsExport extends Thread {
                 pair("paper", mapAsJSON(Bukkit.spigot().getPaperConfig(), null)),
                 pair("tuinity", mapAsJSON(Bukkit.spigot().getTuinityConfig(), null)), // Tuinity - add config to timings report
                 pair("purpur", mapAsJSON(Bukkit.spigot().getPurpurConfig(), null))
+                , pair("yatopia", mapAsJSON(Bukkit.spigot().getYatopiaConfig(), null)) // Yatopia - add config to timings report
                 // Purpur end
         ));
 
@@ -324,7 +325,7 @@ public class TimingsExport extends Thread {
         String response = null;
         String timingsURL = null;
         try {
-            HttpURLConnection con = (HttpURLConnection) new URL(net.pl3x.purpur.PurpurConfig.timingsUrl + "/post").openConnection(); // Purpur
+            HttpURLConnection con = (HttpURLConnection) new URL("http://timings.aikar.co/post").openConnection(); // Purpur // Yatopia
             con.setDoOutput(true);
             String hostName = "BrokenHost";
             try {
diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index 050e0d7ec29755590dde2f35090b96f6f2457952..dde91498e773cc6744612f780ce82bd35ad79637 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -177,6 +177,15 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
         // Paper end
         com.tuinity.tuinity.config.TuinityConfig.init((java.io.File) options.valueOf("tuinity-settings")); // Tuinity - Server Config
 
+        // Yatopia start
+        try {
+            net.yatopia.server.YatopiaConfig.init((java.io.File) options.valueOf("yatopia-settings"));
+        } catch (Exception e) {
+            DedicatedServer.LOGGER.error("Unable to load server configuration", e);
+            return false;
+        }
+        net.yatopia.server.YatopiaConfig.registerCommands();
+        // Yatopia end
         this.setPVP(dedicatedserverproperties.pvp);
         this.setAllowFlight(dedicatedserverproperties.allowFlight);
         this.setResourcePack(dedicatedserverproperties.resourcePack, this.aZ());
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index 7083b379568fd101bec19469b60daf062bc4d137..0a7f88de5c5c307ed01c2f4a43336571f118736d 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -267,6 +267,7 @@ public abstract class EntityLiving extends Entity {
         //this.world.getMethodProfiler().enter("livingEntityBaseTick"); // Akarin - remove caller
         boolean flag = this instanceof EntityHuman;
 
+        if (!net.yatopia.server.YatopiaConfig.disableEntityStuckChecks) { // Yatopia
         if (this.isAlive()) {
             if (this.inBlock()) {
                 this.damageEntity(DamageSource.STUCK, 1.0F);
@@ -282,6 +283,7 @@ public abstract class EntityLiving extends Entity {
                 }
             }
         }
+        } // Yatopia
 
         if (this.isFireProof() || this.world.isClientSide) {
             this.extinguish();
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index c944b407df03fca1153978d0763313d44d6461c8..66d0cf7d4b0bbffbd5eff64bfc46806c6f834c21 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -189,7 +189,7 @@ public abstract class PlayerList {
         // Spigot - view distance
         playerconnection.sendPacket(new PacketPlayOutLogin(entityplayer.getId(), entityplayer.playerInteractManager.getGameMode(), entityplayer.playerInteractManager.c(), BiomeManager.a(worldserver1.getSeed()), worlddata.isHardcore(), this.server.F(), this.s, worldserver1.getDimensionManager(), worldserver1.getDimensionKey(), this.getMaxPlayers(), worldserver1.getChunkProvider().playerChunkMap.getLoadViewDistance(), flag1, !flag, worldserver1.isDebugWorld(), worldserver1.isFlatWorld())); // Paper - no-tick view distance
         entityplayer.getBukkitEntity().sendSupportedChannels(); // CraftBukkit
-        playerconnection.sendPacket(new PacketPlayOutCustomPayload(PacketPlayOutCustomPayload.a, (new PacketDataSerializer(Unpooled.buffer())).a(this.getServer().getServerModName())));
+        playerconnection.sendPacket(new PacketPlayOutCustomPayload(PacketPlayOutCustomPayload.a, (new PacketDataSerializer(Unpooled.buffer())).a(net.yatopia.server.YatopiaConfig.brandName))); // Yatopia
         playerconnection.sendPacket(new PacketPlayOutServerDifficulty(worlddata.getDifficulty(), worlddata.isDifficultyLocked()));
         playerconnection.sendPacket(new PacketPlayOutAbilities(entityplayer.abilities));
         playerconnection.sendPacket(new PacketPlayOutHeldItemSlot(entityplayer.inventory.itemInHandIndex));
diff --git a/src/main/java/net/yatopia/server/YatopiaCommand.java b/src/main/java/net/yatopia/server/YatopiaCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..3a3cda53b253e42556268506e2c32b65be84bedb
--- /dev/null
+++ b/src/main/java/net/yatopia/server/YatopiaCommand.java
@@ -0,0 +1,141 @@
+package net.yatopia.server;
+
+import com.google.common.base.Preconditions;
+import com.google.common.collect.Lists;
+import java.io.File;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.List;
+import java.util.Locale;
+import java.util.function.Function;
+import net.minecraft.server.MinecraftKey;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.World;
+import net.minecraft.server.WorldDataServer;
+import org.bukkit.Bukkit;
+import org.bukkit.ChatColor;
+import org.bukkit.Location;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import org.spigotmc.TicksPerSecondCommand;
+
+public class YatopiaCommand extends Command {
+
+    public YatopiaCommand(String name) {
+        super(name);
+        this.description = "Yatopia related commands";
+        this.usageMessage = "/yatopia [help | reload | info | version]";
+        this.setPermission("bukkit.command.yatopia");
+    }
+
+    @Override
+    public List<String> tabComplete(CommandSender sender, String alias, String[] args, Location location) throws IllegalArgumentException {
+        if (args.length <= 1) {
+            return getListMatchingLast(args, "help", "info", "reload", "version");
+        }
+        return Collections.emptyList();
+    }
+
+    // Code from Mojang - copyright them
+    public static List<String> getListMatchingLast(String[] args, String... matches) {
+        return getListMatchingLast(args, Arrays.asList(matches));
+    }
+
+    public static boolean matches(String s, String s1) {
+        return s1.regionMatches(true, 0, s, 0, s.length());
+    }
+
+    public static List<String> getListMatchingLast(String[] strings, Collection<?> collection) {
+        String last = strings[strings.length - 1];
+        List<String> results = Lists.newArrayList();
+
+        if (!collection.isEmpty()) {
+            Function<Object, String> toStringFunction = (o) -> {
+                Preconditions.checkNotNull(o);
+                return o.toString();
+            };
+            for (Object c : collection) {
+                String value = toStringFunction.apply(c);
+                if (matches(last, value)) {
+                    results.add(value);
+                }
+            }
+
+            if (results.isEmpty()) {
+                for (Object c : collection) {
+                    if (c instanceof MinecraftKey) {
+                        MinecraftKey key = (MinecraftKey) c;
+                        if (matches(last, key.getKey())) {
+                            results.add(key.toString());
+                        }
+                    }
+                }
+            }
+        }
+
+        return results;
+    }
+    // end copy stuff
+
+    @Override
+    public boolean execute(CommandSender sender, String commandLabel, String[] args) {
+        if (!testPermission(sender)) return true;
+
+        if (args.length == 0) {
+            sender.sendMessage(ChatColor.RED + "Usage: " + usageMessage);
+            return false;
+        }
+
+        switch (args[0].toLowerCase(Locale.ENGLISH)) {
+            case "info":
+                doInfo(sender);
+                break;
+            case "reload":
+                doReload(sender);
+                break;
+            case "ver":
+            case "version":
+                Command ver = org.bukkit.Bukkit.getServer().getCommandMap().getCommand("version");
+                if (ver != null) {
+                    ver.execute(sender, commandLabel, new String[0]);
+                    break;
+                }
+                // else - fall through to default
+            default:
+                sender.sendMessage(ChatColor.RED + "Usage: " + usageMessage);
+                return false;
+        }
+
+        return true;
+    }
+
+    private void doInfo(CommandSender sender) {
+        broadcastMessage(sender, ChatColor.GOLD + "Last tick took " + TicksPerSecondCommand.format(Bukkit.getLastTickMs()));
+        for (World world : MinecraftServer.getServer().getWorlds()) {
+            String name = ((WorldDataServer) world.worldData).getName();
+            broadcastMessage(sender, ChatColor.GOLD + "Entities in world " +
+                    ChatColor.YELLOW + "\"" + name + "\"" +
+                    ChatColor.GOLD + ": " + ChatColor.YELLOW + world.getWorld().getEntityCount());
+            broadcastMessage(sender, ChatColor.GOLD + "Chunks loaded in world " +
+                    ChatColor.YELLOW + "\"" + name + "\"" +
+                    ChatColor.GOLD + ": " + ChatColor.YELLOW + world.getWorld().getChunkCount());
+        }
+    }
+
+    private void doReload(CommandSender sender) {
+        broadcastMessage(sender, ChatColor.RED + "Please note that this command is not supported and may cause issues.");
+        broadcastMessage(sender, ChatColor.RED + "If you encounter any issues please use the /stop command to restart your server.");
+
+        MinecraftServer console = MinecraftServer.getServer();
+        YatopiaConfig.init((File) console.options.valueOf("yatopia-settings"));
+        console.server.reloadCount++;
+
+        broadcastMessage(sender, ChatColor.GREEN + "Yatopia config reload complete.");
+    }
+
+    // utility method
+    private void broadcastMessage(CommandSender sender, String message) {
+        Command.broadcastCommandMessage(sender, message);
+    }
+}
diff --git a/src/main/java/net/yatopia/server/YatopiaConfig.java b/src/main/java/net/yatopia/server/YatopiaConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..f69be0c7eef07727028c14e5ad9c859363aa19c0
--- /dev/null
+++ b/src/main/java/net/yatopia/server/YatopiaConfig.java
@@ -0,0 +1,213 @@
+package net.yatopia.server;
+
+import com.google.common.base.Throwables;
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.TimeUnit;
+import java.util.logging.Level;
+import java.util.regex.Pattern;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.Bukkit;
+import org.bukkit.command.Command;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+
+public class YatopiaConfig {
+
+    public static File CONFIG_FILE;
+    private static final String HEADER = "This is the main configuration file for Yatopia.\n"
+                        + "Yatopia contains many breaking changes and settings, so know what you are doing!\n"
+                        + "You have been warned!\n";
+    /*========================================================================*/
+    public static YamlConfiguration config;
+    public static int version; // since we're remapping sidestreams' configs we need this public
+    static Map<String, Command> commands;
+    public static boolean verbose; // since we're remapping sidestreams' configs we need this public
+    private static boolean fatalError;
+    /*========================================================================*/
+    private static boolean metricsStarted;
+
+    public static void init(File configFile) {
+        CONFIG_FILE = configFile;
+        config = new YamlConfiguration();
+        try {
+            config.load(CONFIG_FILE);
+        } catch (IOException ex) {
+        } catch (InvalidConfigurationException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not load yatopia.yml, please correct your syntax errors", ex);
+            throw Throwables.propagate(ex);
+        }
+        config.options().header(HEADER);
+        config.options().copyDefaults(true);
+        verbose = getBoolean("verbose", false);
+
+        commands = new HashMap<String, Command>();
+        commands.put("yatopia", new YatopiaCommand("yatopia"));
+
+        version = getInt("config-version", 1);
+        set("config-version", 1);
+        removeLeftovers();
+        readConfig(YatopiaConfig.class, null);
+    }
+
+    private static void removeLeftovers() {
+        // this method is only to remove non-used values in the config
+
+        // leftover from rainforest
+        if (config.get("world-settings") != null) {
+            set("world-settings", null);
+        }
+        if (config.get("allow-player-item-duplication") != null) {
+            set("allow-player-item-duplication", null);
+        }
+        if (config.get("allow-ridable-chestable-duping") != null) {
+            set("allow-ridable-chestable-duping", null);
+        }
+        if (config.get("allow-sand-duping") != null) {
+            set("allow-sand-duping", null);
+        }
+    }
+
+    protected static void logError(String s) {
+        Bukkit.getLogger().severe(s);
+    }
+
+    protected static void fatal(String s) {
+        fatalError = true;
+        throw new RuntimeException("Fatal yatopia.yml config error: " + s);
+    }
+
+    protected static void log(String s) {
+        if (verbose) {
+            Bukkit.getLogger().info(s);
+        }
+    }
+
+    public static void registerCommands() {
+        for (Map.Entry<String, Command> entry : commands.entrySet()) {
+            MinecraftServer.getServer().server.getCommandMap().register(entry.getKey(), "Yatopia", entry.getValue());
+        }
+    }
+
+    static void readConfig(Class<?> clazz, Object instance) {
+        for (Method method : clazz.getDeclaredMethods()) {
+            if (Modifier.isPrivate(method.getModifiers())) {
+                if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+                    try {
+                        method.setAccessible(true);
+                        method.invoke(instance);
+                    } catch (InvocationTargetException ex) {
+                        throw Throwables.propagate(ex.getCause());
+                    } catch (Exception ex) {
+                        Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, ex);
+                    }
+                }
+            }
+        }
+
+        try {
+            config.save(CONFIG_FILE);
+        } catch (IOException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, ex);
+        }
+    }
+
+    private static final Pattern SPACE = Pattern.compile(" ");
+    private static final Pattern NOT_NUMERIC = Pattern.compile("[^-\\d.]");
+
+    public static int getSeconds(String str) {
+        str = SPACE.matcher(str).replaceAll("");
+        final char unit = str.charAt(str.length() - 1);
+        str = NOT_NUMERIC.matcher(str).replaceAll("");
+        double num;
+        try {
+            num = Double.parseDouble(str);
+        } catch (Exception e) {
+            num = 0D;
+        }
+        switch (unit) {
+            case 'd':
+                num *= (double) 60 * 60 * 24;
+                break;
+            case 'h':
+                num *= (double) 60 * 60;
+                break;
+            case 'm':
+                num *= 60;
+                break;
+            default:
+            case 's':
+                break;
+        }
+        return (int) num;
+    }
+
+    protected static String timeSummary(int seconds) {
+        String time = "";
+
+        if (seconds > 60 * 60 * 24) {
+            time += TimeUnit.SECONDS.toDays(seconds) + "d";
+            seconds %= 60 * 60 * 24;
+        }
+
+        if (seconds > 60 * 60) {
+            time += TimeUnit.SECONDS.toHours(seconds) + "h";
+            seconds %= 60 * 60;
+        }
+
+        if (seconds > 0) {
+            time += TimeUnit.SECONDS.toMinutes(seconds) + "m";
+        }
+        return time;
+    }
+
+    private static void set(String path, Object val) {
+        config.set(path, val);
+    }
+
+    private static boolean getBoolean(String path, boolean def) {
+        config.addDefault(path, def);
+        return config.getBoolean(path, config.getBoolean(path));
+    }
+
+    private static double getDouble(String path, double def) {
+        config.addDefault(path, def);
+        return config.getDouble(path, config.getDouble(path));
+    }
+
+    private static float getFloat(String path, float def) {
+        // TODO: Figure out why getFloat() always returns the default value.
+        return (float) getDouble(path, (double) def);
+    }
+
+    private static int getInt(String path, int def) {
+        config.addDefault(path, def);
+        return config.getInt(path, config.getInt(path));
+    }
+
+    private static <T> List<T> getList(String path, List<T> def) {
+        config.addDefault(path, def);
+        return (List<T>) config.getList(path, config.getList(path));
+    }
+
+    private static String getString(String path, String def) {
+        config.addDefault(path, def);
+        return config.getString(path, config.getString(path));
+    }
+
+    public static boolean disableEntityStuckChecks = false;
+    private static void disableEntityStuckChecks() {
+        disableEntityStuckChecks = getBoolean("settings.disableEntityStuckChecks", false);
+    }
+
+    public static String brandName = "Yatopia";
+    private static void brandName() {
+        brandName = getString("brand-name", brandName);
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 5c221dd6b6e318eaa876f6f3016c9d4d8ded13fb..3f02309c1ede76ed69c6a95ec5e9807715949146 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -843,6 +843,7 @@ public final class CraftServer implements Server {
         com.tuinity.tuinity.config.TuinityConfig.init((File) console.options.valueOf("tuinity-settings")); // Tuinity - Server Config
         net.pl3x.purpur.PurpurConfig.init((File) console.options.valueOf("purpur-settings")); // Purpur
         de.minebench.origami.OrigamiConfig.init((File) console.options.valueOf("origami-settings")); // Origami
+        net.yatopia.server.YatopiaConfig.init((File) console.options.valueOf("yatopia-settings")); // Yatopia
         for (WorldServer world : console.getWorlds()) {
             world.worldDataServer.setDifficulty(config.difficulty);
             world.setSpawnFlags(config.spawnMonsters, config.spawnAnimals);
@@ -2263,6 +2264,13 @@ public final class CraftServer implements Server {
         }
         // Origami end
 
+        // Yatopia start
+        @Override
+        public YamlConfiguration getYatopiaConfig() {
+            return net.yatopia.server.YatopiaConfig.config;
+        }
+        // Yatopia end
+
         @Override
         public void restart() {
             org.spigotmc.RestartCommand.restart();
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 62012d2b780d3399bd641ca3ca4a4ac127e3bcb5..dddba89eee0181c066ad979bc2b75e8de36e7458 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -162,6 +162,14 @@ public class Main {
                         .describedAs("Yml file");
                 // Origami end
 
+                // Yatopia start
+                acceptsAll(asList("yatopia", "yatopia-settings"), "File for yatopia settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("yatopia.yml"))
+                        .describedAs("Yml file");
+                // Yatopia end
+
                 // Paper start
                 acceptsAll(asList("server-name"), "Name of the server")
                         .withRequiredArg()
