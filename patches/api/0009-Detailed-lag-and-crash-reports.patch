From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: ishland <ishlandmc@yeah.net>
Date: Thu, 28 Jan 2021 20:47:41 +0800
Subject: [PATCH] Detailed lag and crash reports


diff --git a/src/main/java/org/bukkit/plugin/SimplePluginManager.java b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
index a90945e434aa3729e2ec5355a4340c995316a2f7..f99baef549dccff2c503d284cf2b9c9275d34590 100644
--- a/src/main/java/org/bukkit/plugin/SimplePluginManager.java
+++ b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
@@ -560,7 +560,9 @@ public final class SimplePluginManager implements PluginManager {
 
     // Paper start
     private void handlePluginException(String msg, Throwable ex, Plugin plugin) {
-        server.getLogger().log(Level.SEVERE, msg, ex);
+        server.getLogger().log(Level.SEVERE, msg);
+        org.yatopiamc.yatopia.api.internal.StackTraceUtils.print(ex, _msg -> server.getLogger().log(Level.SEVERE, _msg));
+        server.getLogger().log(Level.SEVERE, org.yatopiamc.yatopia.api.internal.StackTraceUtils.EXCEPTION_DETAILS_BELOW, ex);
         callEvent(new ServerExceptionEvent(new ServerPluginEnableDisableException(msg, ex, plugin)));
     }
     // Paper end
@@ -621,7 +623,9 @@ public final class SimplePluginManager implements PluginManager {
             } catch (Throwable ex) {
                 // Paper start - error reporting
                 String msg = "Could not pass event " + event.getEventName() + " to " + registration.getPlugin().getDescription().getFullName();
-                server.getLogger().log(Level.SEVERE, msg, ex);
+                server.getLogger().log(Level.SEVERE, msg);
+                org.yatopiamc.yatopia.api.internal.StackTraceUtils.print(ex, _msg -> server.getLogger().log(Level.SEVERE, _msg));
+                server.getLogger().log(Level.SEVERE, org.yatopiamc.yatopia.api.internal.StackTraceUtils.EXCEPTION_DETAILS_BELOW, ex);
                 if (!(event instanceof ServerExceptionEvent)) { // We don't want to cause an endless event loop
                     callEvent(new ServerExceptionEvent(new ServerEventException(msg, ex, registration.getPlugin(), registration.getListener(), event)));
                 }
diff --git a/src/main/java/org/yatopiamc/yatopia/api/internal/StackTraceUtils.java b/src/main/java/org/yatopiamc/yatopia/api/internal/StackTraceUtils.java
new file mode 100644
index 0000000000000000000000000000000000000000..0aa9bc6ad0a85d469b29201b9da29165bafb874c
--- /dev/null
+++ b/src/main/java/org/yatopiamc/yatopia/api/internal/StackTraceUtils.java
@@ -0,0 +1,105 @@
+package org.yatopiamc.yatopia.api.internal;
+
+import com.google.common.base.Suppliers;
+import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
+import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;
+import org.bukkit.Bukkit;
+import org.bukkit.plugin.Plugin;
+import org.bukkit.plugin.PluginLoader;
+import org.bukkit.plugin.SimplePluginManager;
+import org.bukkit.plugin.java.JavaPlugin;
+import org.bukkit.plugin.java.JavaPluginLoader;
+import org.bukkit.plugin.java.PluginClassLoader;
+
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.concurrent.TimeUnit;
+import java.util.function.Consumer;
+import java.util.function.Supplier;
+import java.util.stream.Collectors;
+
+public class StackTraceUtils {
+
+    public static final String EXCEPTION_DETAILS_BELOW = "Exception details below: ";
+
+    private static final Supplier<Map<Plugin, Set<Class<?>>>> loadedClassesSupplier = Suppliers.memoizeWithExpiration(StackTraceUtils::scanForPluginClasses, 5, TimeUnit.SECONDS);
+
+    public static void print(StackTraceElement[] stackTrace, Consumer<String> out) {
+        Set<Plugin> suspectedPlugins = getSuspectedPluginsFromStackTrace(stackTrace);
+
+        printSuspectedPlugins(out, suspectedPlugins);
+    }
+
+    public static void print(Throwable t, Consumer<String> out) {
+        Set<Plugin> suspectedPlugins = getSuspectedPluginsFromStackTrace(getStackTracesFromThrowable(t).toArray(new StackTraceElement[0]));
+
+        printSuspectedPlugins(out, suspectedPlugins);
+    }
+
+    private static Set<StackTraceElement> getStackTracesFromThrowable(Throwable t) {
+        if(t == null) return Collections.emptySet();
+        Set<StackTraceElement> elements = new ObjectOpenHashSet<>();
+        elements.addAll(getStackTracesFromThrowable(t.getCause()));
+        elements.addAll(Arrays.stream(t.getSuppressed()).flatMap(throwable -> getStackTracesFromThrowable(throwable).stream()).collect(Collectors.toSet()));
+        elements.addAll(Arrays.asList(t.getStackTrace()));
+        return elements;
+    }
+
+    private static void printSuspectedPlugins(Consumer<String> out, Set<Plugin> suspectedPlugins) {
+        if (!suspectedPlugins.isEmpty()) {
+            out.accept("Suspected Plugins: ");
+            for (Plugin plugin : suspectedPlugins) {
+                StringBuilder builder = new StringBuilder("\t");
+                builder.append(plugin.getName())
+                        .append("{")
+                        .append(plugin.isEnabled() ? "enabled" : "disabled")
+                        .append(",").append("ver=").append(plugin.getDescription().getVersion());
+                if (!plugin.isNaggable())
+                    builder.append(",").append("nag");
+                if (plugin instanceof JavaPlugin)
+                    builder.append(",").append("path=").append(((JavaPlugin) plugin).getFile());
+
+                builder.append("}");
+                out.accept(builder.toString());
+            }
+        } else {
+            out.accept("Suspected Plugins: None");
+        }
+    }
+
+    private static Set<Plugin> getSuspectedPluginsFromStackTrace(StackTraceElement[] stackTrace) {
+        Map<Plugin, Set<Class<?>>> loadedClasses = loadedClassesSupplier.get();
+        Set<Plugin> suspectedPlugins = new HashSet<>();
+        for (StackTraceElement stackTraceElement : stackTrace) {
+            for (Map.Entry<Plugin, Set<Class<?>>> pluginSetEntry : loadedClasses.entrySet()) {
+                if (pluginSetEntry.getValue().stream().anyMatch(clazz -> clazz.getName().equals(stackTraceElement.getClassName())))
+                    suspectedPlugins.add(pluginSetEntry.getKey());
+            }
+        }
+        return suspectedPlugins;
+    }
+
+    private static Map<Plugin, Set<Class<?>>> scanForPluginClasses() {
+        Map<Plugin, Set<Class<?>>> loadedClasses = new Object2ObjectOpenHashMap<>();
+        if (Bukkit.getPluginManager() instanceof SimplePluginManager) {
+            final SimplePluginManager pluginManager = (SimplePluginManager) Bukkit.getPluginManager();
+            final Collection<PluginLoader> pluginLoaders = pluginManager.getPluginLoaders();
+            for (PluginLoader pluginLoader : pluginLoaders) {
+                if (pluginLoader instanceof JavaPluginLoader) {
+                    JavaPluginLoader javaPluginLoader = (JavaPluginLoader) pluginLoader;
+                    final List<PluginClassLoader> classLoaders = javaPluginLoader.getClassLoaders();
+                    for (PluginClassLoader classLoader : classLoaders) {
+                        loadedClasses.put(classLoader.getPlugin(), new ObjectOpenHashSet<>(classLoader.getLoadedClasses()));
+                    }
+                }
+            }
+        }
+        return loadedClasses;
+    }
+
+}
